{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ipcRenderer","undefined","NameInput","props","label","side","pick","useState","name","setName","className","TextField","variant","value","onChange","e","target","send","type","App","userName","champName","spells","Show","setShow","handleChange","checked","Grid","container","xs","justify","alignItems","FormGroup","row","map","FormControlLabel","control","Switch","style","color","item","n","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAcMA,OAAYC,EAClB,SAASC,EAAUC,GAAQ,IACjBC,EAAsBD,EAAtBC,MAAOC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,KADG,EAEAC,mBAAS,IAFT,mBAEjBC,EAFiB,KAEXC,EAFW,KAYxB,OACE,qBAAKC,UAAU,aAAf,SACE,cAACC,EAAA,EAAD,CAAWP,MAAOA,EAAOQ,QAAQ,SAASC,MAAOL,EAAMM,SAXvC,SAACC,GACnBN,EAAQM,EAAEC,OAAOH,OACjBb,EAAYiB,KAAK,UAAU,CACzBC,KAAK,OACLb,KAAKA,EACLC,KAAKA,EACLO,MAAML,SAuEGW,MA5Df,WAAgB,IAAD,EACWZ,mBAAS,CAC/Ba,UAAU,EACVC,WAAW,EACXC,QAAQ,IAJG,mBACNC,EADM,KACAC,EADA,KAMPC,EAAe,SAACV,GACpBS,EAAQ,2BAAKD,GAAN,kBAAaR,EAAEC,OAAOR,KAAOO,EAAEC,OAAOU,YAE/C,OACE,qBAAKhB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UAEE,uBACA,uBACA,eAACiB,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,cAACD,EAAA,EAAD,CAAMC,WAAS,EAACC,GAAI,GAAIC,QAAS,SAAUC,WAAY,eAAvD,SACE,cAACC,EAAA,EAAD,CAAWC,KAAG,EAAd,SAEI,CACE,CAAEzB,KAAM,YAAaJ,MAAO,mCAC5B,CAAEI,KAAM,WAAYJ,MAAO,yCAC3B,CAAEI,KAAM,SAAUJ,MAAO,oCACzB8B,KAAI,YAAsB,IAAnB1B,EAAkB,EAAlBA,KAAMJ,EAAY,EAAZA,MACb,OACE,cAAC+B,EAAA,EAAD,CACEC,QAAS,cAACC,EAAA,EAAD,CAAQX,QAASH,EAAKf,GAAOM,SAAUW,EAAcjB,KAAMA,IACpEJ,MAAOA,EACPkC,MAAO,CAAEC,MAAO,kBAQ5B,eAACZ,EAAA,EAAD,CAAMa,MAAI,EAACX,GAAI,EAAf,UACE,cAAC3B,EAAD,CAAWG,KAAK,OAAOC,KAAM,EAAGF,MAAO,oCACtC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAG8B,KAAI,SAACO,GACpB,OACE,cAACvC,EAAD,CAAWG,KAAK,OAAOC,KAAMmC,EAAGrC,MAAO,sBAASqC,EAAI,oCAI1D,eAACd,EAAA,EAAD,CAAMa,MAAI,EAACX,GAAI,EAAf,UACE,cAAC3B,EAAD,CAAWG,KAAK,MAAMC,KAAM,EAAGF,MAAO,oCACrC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAG8B,KAAI,SAACO,GACpB,OACE,cAACvC,EAAD,CAAWG,KAAK,MAAMC,KAAMmC,EAAGrC,MAAO,sBAASqC,EAAI,6CCvEpDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.83abd736.chunk.js","sourcesContent":["import './App.css';\n\nimport { useState, useEffect } from 'react'\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\n//const electron = require(\"electron\")\n\n//const ipcRenderer = electron.ipcRenderer\nconst ipcRenderer=undefined\nfunction NameInput(props) {\n  const { label, side, pick } = props\n  const [name, setName] = useState(\"\")\n  const nameHandler = (e) => {\n    setName(e.target.value)\n    ipcRenderer.send('changed',{\n      type:'name',\n      side:side,\n      pick:pick,\n      value:name\n    })\n  }\n  return (\n    <div className=\"name-input\">\n      <TextField label={label} variant='filled' value={name} onChange={nameHandler}></TextField>\n    </div>\n  )\n}\n\n\nfunction App() {\n  const [Show, setShow] = useState({\n    userName: true,\n    champName: true,\n    spells: true\n  })\n  const handleChange = (e) => {\n    setShow({ ...Show, [e.target.name]: e.target.checked })\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <br />\n        <br />\n        <Grid container>\n          <Grid container xs={12} justify={'center'} alignItems={'space-around'}>\n            <FormGroup row>\n              {\n                [\n                  { name: 'champName', label: '챔피언 이름' },\n                  { name: 'userName', label: '플레이어 이름' },\n                  { name: 'spells', label: '소환사 주문' },\n                ].map(({ name, label }) => {\n                  return (\n                    <FormControlLabel\n                      control={<Switch checked={Show[name]} onChange={handleChange} name={name} />}\n                      label={label}\n                      style={{ color: 'black' }}\n                    />\n                  )\n                })\n              }\n\n            </FormGroup>\n          </Grid>\n          <Grid item xs={6}>\n            <NameInput side='blue' pick={0} label={'블루팀 팀명'} />\n            {[1, 2, 3, 4, 5].map((n) => {\n              return (\n                <NameInput side='blue' pick={n} label={'블루팀 ' + n + '픽 닉네임'} />\n              )\n            })}\n          </Grid>\n          <Grid item xs={6}>\n            <NameInput side='red' pick={0} label={'레드팀 팀명'} />\n            {[1, 2, 3, 4, 5].map((n) => {\n              return (\n                <NameInput side='red' pick={n} label={'레드팀 ' + n + '픽 닉네임'} />\n              )\n            })}\n          </Grid>\n        </Grid>\n\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}